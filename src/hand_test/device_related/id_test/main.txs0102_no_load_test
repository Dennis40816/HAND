#include <stdio.h>
#include "driver/i2c.h"
#include "esp_log.h"

#define I2C_MASTER_NUM I2C_NUM_0               // I2C port number for master dev
#define I2C_MASTER_TX_BUF_DISABLE 0            // I2C master doesn't need buffer
#define I2C_MASTER_RX_BUF_DISABLE 0            // I2C master doesn't need buffer
#define I2C_MASTER_FREQ_HZ 400000              // I2C master clock frequency
#define I2C_MASTER_SDA_IO GPIO_NUM_3           // GPIO number for I2C master data
#define I2C_MASTER_SCL_IO GPIO_NUM_2           // GPIO number for I2C master clock
#define I2C_SLAVE_ADDR 0x40                    // I2C slave address
#define WRITE_BIT I2C_MASTER_WRITE             // I2C master write
#define ACK_CHECK_DIS 0x0                      // Disable ACK check

static const char *TAG = "i2c_example";

/**
 * @brief i2c master initialization
 */
static esp_err_t i2c_master_init(void)
{
    int i2c_master_port = I2C_MASTER_NUM;
    i2c_config_t conf = {
        .mode = I2C_MODE_MASTER,
        .sda_io_num = I2C_MASTER_SDA_IO,
        .sda_pullup_en = GPIO_PULLUP_ENABLE,
        .scl_io_num = I2C_MASTER_SCL_IO,
        .scl_pullup_en = GPIO_PULLUP_ENABLE,
        .master.clk_speed = I2C_MASTER_FREQ_HZ,
        // .clk_flags = 0,                        // Optional: required for ESP32-S2/S3
    };
    esp_err_t err = i2c_param_config(i2c_master_port, &conf);
    if (err != ESP_OK) {
        ESP_LOGE(TAG, "I2C param config failed");
        return err;
    }
    err = i2c_driver_install(i2c_master_port, conf.mode,
                             I2C_MASTER_RX_BUF_DISABLE,
                             I2C_MASTER_TX_BUF_DISABLE, 0);
    if (err != ESP_OK) {
        ESP_LOGE(TAG, "I2C driver install failed");
    }
    return err;
}

/**
 * @brief I2C master write to slave
 */
static esp_err_t i2c_master_write_slave(uint8_t data)
{
    i2c_cmd_handle_t cmd = i2c_cmd_link_create();
    esp_err_t ret = i2c_master_start(cmd);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "I2C start command failed");
        i2c_cmd_link_delete(cmd);
        return ret;
    }
    ret = i2c_master_write_byte(cmd, (I2C_SLAVE_ADDR << 1) | WRITE_BIT, ACK_CHECK_DIS);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "I2C write slave address failed");
        i2c_cmd_link_delete(cmd);
        return ret;
    }
    ret = i2c_master_write_byte(cmd, data, ACK_CHECK_DIS);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "I2C write data failed");
    }
    ret = i2c_master_stop(cmd);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "I2C stop command failed");
    }
    ret = i2c_master_cmd_begin(I2C_MASTER_NUM, cmd, pdMS_TO_TICKS(1000));
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "I2C master command begin failed");
    }
    i2c_cmd_link_delete(cmd);
    return ret;
}

void app_main(void)
{
    vTaskDelay(pdMS_TO_TICKS(3000));
    esp_err_t ret = i2c_master_init();
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "I2C master initialization failed");
        return;
    }

    uint8_t data_to_write = 0x42;
    ret = i2c_master_write_slave(data_to_write);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "I2C master write to slave failed");
    } else {
        ESP_LOGI(TAG, "Data 0x%x was written to address 0x%x", data_to_write, I2C_SLAVE_ADDR);
    }
}
