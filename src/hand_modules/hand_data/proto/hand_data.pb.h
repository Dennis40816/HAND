/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_SRC_HAND_MODULES_HAND_DATA_PROTO_HAND_DATA_PB_H_INCLUDED
#define PB_SRC_HAND_MODULES_HAND_DATA_PROTO_HAND_DATA_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _HandMsgDirection {
    HandMsgDirection_FROM_HAND = 0,
    HandMsgDirection_TO_HAND = 1
} HandMsgDirection;

typedef enum _HandMainMsgType {
    HandMainMsgType_CONFIG = 0,
    HandMainMsgType_DATA = 1,
    HandMainMsgType_CMD = 2 /* which requires target to perform operations */
} HandMainMsgType;

typedef enum _HandChipType {
    HandChipType_ESP32_S3_MINI = 0,
    HandChipType_BQ27427 = 1,
    HandChipType_KX132_1211 = 2,
    HandChipType_VL53L1X = 3,
    HandChipType_CH101 = 4,
    HandChipType_BOS1901 = 5,
    HandChipType_BMI323 = 6,
    HandChipType_TCA6408A = 7
} HandChipType;

typedef enum _HandChipInstance {
    HandChipInstance_ESP32_S3_MINI_MAIN = 0,
    HandChipInstance_BQ27427_BATTERY = 1,
    HandChipInstance_KX132_1211_SENSOR1 = 2,
    HandChipInstance_KX132_1211_SENSOR2 = 3,
    HandChipInstance_KX132_1211_SENSOR3 = 4,
    HandChipInstance_KX132_1211_SENSOR4 = 5,
    HandChipInstance_VL53L1X_SENSOR1 = 6,
    HandChipInstance_VL53L1X_SENSOR2 = 7,
    HandChipInstance_CH101_SENSOR1 = 8,
    HandChipInstance_CH101_SENSOR2 = 9,
    HandChipInstance_CH101_SENSOR3 = 10,
    HandChipInstance_CH101_SENSOR4 = 11,
    HandChipInstance_BOS1901_ACTUATOR1 = 12,
    HandChipInstance_BOS1901_ACTUATOR2 = 13,
    HandChipInstance_BOS1901_ACTUATOR3 = 14,
    HandChipInstance_BOS1901_ACTUATOR4 = 15,
    HandChipInstance_BMI323_IMU = 16,
    HandChipInstance_TCA6408A_CH101 = 17,
    HandChipInstance_TCA6408A_OTHER = 18
} HandChipInstance;

/* how we parse HandDataMsg.data array */
typedef enum _HandDataType {
    HandDataType_UINT8 = 0,
    HandDataType_UINT16 = 1,
    HandDataType_INT32 = 2,
    HandDataType_INT64 = 3,
    HandDataType_FLOAT = 4,
    HandDataType_DOUBLE = 5
} HandDataType;

/* Struct definitions */
typedef struct _HandDataMsg {
    HandChipInstance source;
    HandDataType data_type;
    uint32_t data_count; /* number of data elements, not byte length */
    bool has_timestamp;
    int64_t timestamp;
    pb_callback_t timestamps;
    pb_callback_t data;
} HandDataMsg;

typedef struct _HandConfigMsg {
    pb_callback_t target;
    pb_callback_t config;
} HandConfigMsg;

typedef struct _HandCmdMsg {
    HandChipInstance target;
    pb_callback_t cmd;
} HandCmdMsg;

/* Wrapper messages */
typedef struct _HandDataWrapper {
    pb_callback_t data_msgs;
} HandDataWrapper;

typedef struct _HandConfigWrapper {
    pb_callback_t config_msgs;
} HandConfigWrapper;

typedef struct _HandCmdWrapper {
    pb_callback_t cmd_msgs;
} HandCmdWrapper;

typedef struct _HandMsg {
    HandMsgDirection direction;
    HandMainMsgType msg_type;
    HandChipType chip_type;
    pb_size_t which_content;
    union {
        HandDataWrapper data_wrapper;
        HandConfigWrapper config_wrapper;
        HandCmdWrapper cmd_wrapper;
    } content;
} HandMsg;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _HandMsgDirection_MIN HandMsgDirection_FROM_HAND
#define _HandMsgDirection_MAX HandMsgDirection_TO_HAND
#define _HandMsgDirection_ARRAYSIZE ((HandMsgDirection)(HandMsgDirection_TO_HAND+1))

#define _HandMainMsgType_MIN HandMainMsgType_CONFIG
#define _HandMainMsgType_MAX HandMainMsgType_CMD
#define _HandMainMsgType_ARRAYSIZE ((HandMainMsgType)(HandMainMsgType_CMD+1))

#define _HandChipType_MIN HandChipType_ESP32_S3_MINI
#define _HandChipType_MAX HandChipType_TCA6408A
#define _HandChipType_ARRAYSIZE ((HandChipType)(HandChipType_TCA6408A+1))

#define _HandChipInstance_MIN HandChipInstance_ESP32_S3_MINI_MAIN
#define _HandChipInstance_MAX HandChipInstance_TCA6408A_OTHER
#define _HandChipInstance_ARRAYSIZE ((HandChipInstance)(HandChipInstance_TCA6408A_OTHER+1))

#define _HandDataType_MIN HandDataType_UINT8
#define _HandDataType_MAX HandDataType_DOUBLE
#define _HandDataType_ARRAYSIZE ((HandDataType)(HandDataType_DOUBLE+1))

#define HandDataMsg_source_ENUMTYPE HandChipInstance
#define HandDataMsg_data_type_ENUMTYPE HandDataType

#define HandConfigMsg_target_ENUMTYPE HandChipInstance

#define HandCmdMsg_target_ENUMTYPE HandChipInstance




#define HandMsg_direction_ENUMTYPE HandMsgDirection
#define HandMsg_msg_type_ENUMTYPE HandMainMsgType
#define HandMsg_chip_type_ENUMTYPE HandChipType


/* Initializer values for message structs */
#define HandDataMsg_init_default                 {_HandChipInstance_MIN, _HandDataType_MIN, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define HandConfigMsg_init_default               {{{NULL}, NULL}, {{NULL}, NULL}}
#define HandCmdMsg_init_default                  {_HandChipInstance_MIN, {{NULL}, NULL}}
#define HandDataWrapper_init_default             {{{NULL}, NULL}}
#define HandConfigWrapper_init_default           {{{NULL}, NULL}}
#define HandCmdWrapper_init_default              {{{NULL}, NULL}}
#define HandMsg_init_default                     {_HandMsgDirection_MIN, _HandMainMsgType_MIN, _HandChipType_MIN, 0, {HandDataWrapper_init_default}}
#define HandDataMsg_init_zero                    {_HandChipInstance_MIN, _HandDataType_MIN, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define HandConfigMsg_init_zero                  {{{NULL}, NULL}, {{NULL}, NULL}}
#define HandCmdMsg_init_zero                     {_HandChipInstance_MIN, {{NULL}, NULL}}
#define HandDataWrapper_init_zero                {{{NULL}, NULL}}
#define HandConfigWrapper_init_zero              {{{NULL}, NULL}}
#define HandCmdWrapper_init_zero                 {{{NULL}, NULL}}
#define HandMsg_init_zero                        {_HandMsgDirection_MIN, _HandMainMsgType_MIN, _HandChipType_MIN, 0, {HandDataWrapper_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define HandDataMsg_source_tag                   1
#define HandDataMsg_data_type_tag                2
#define HandDataMsg_data_count_tag               3
#define HandDataMsg_timestamp_tag                4
#define HandDataMsg_timestamps_tag               5
#define HandDataMsg_data_tag                     6
#define HandConfigMsg_target_tag                 1
#define HandConfigMsg_config_tag                 2
#define HandCmdMsg_target_tag                    1
#define HandCmdMsg_cmd_tag                       2
#define HandDataWrapper_data_msgs_tag            1
#define HandConfigWrapper_config_msgs_tag        1
#define HandCmdWrapper_cmd_msgs_tag              1
#define HandMsg_direction_tag                    1
#define HandMsg_msg_type_tag                     2
#define HandMsg_chip_type_tag                    3
#define HandMsg_data_wrapper_tag                 4
#define HandMsg_config_wrapper_tag               5
#define HandMsg_cmd_wrapper_tag                  6

/* Struct field encoding specification for nanopb */
#define HandDataMsg_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    source,            1) \
X(a, STATIC,   SINGULAR, UENUM,    data_type,         2) \
X(a, STATIC,   SINGULAR, UINT32,   data_count,        3) \
X(a, STATIC,   OPTIONAL, INT64,    timestamp,         4) \
X(a, CALLBACK, REPEATED, INT64,    timestamps,        5) \
X(a, CALLBACK, SINGULAR, BYTES,    data,              6)
#define HandDataMsg_CALLBACK pb_default_field_callback
#define HandDataMsg_DEFAULT NULL

#define HandConfigMsg_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, UENUM,    target,            1) \
X(a, CALLBACK, SINGULAR, BYTES,    config,            2)
#define HandConfigMsg_CALLBACK pb_default_field_callback
#define HandConfigMsg_DEFAULT NULL

#define HandCmdMsg_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    target,            1) \
X(a, CALLBACK, SINGULAR, BYTES,    cmd,               2)
#define HandCmdMsg_CALLBACK pb_default_field_callback
#define HandCmdMsg_DEFAULT NULL

#define HandDataWrapper_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  data_msgs,         1)
#define HandDataWrapper_CALLBACK pb_default_field_callback
#define HandDataWrapper_DEFAULT NULL
#define HandDataWrapper_data_msgs_MSGTYPE HandDataMsg

#define HandConfigWrapper_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  config_msgs,       1)
#define HandConfigWrapper_CALLBACK pb_default_field_callback
#define HandConfigWrapper_DEFAULT NULL
#define HandConfigWrapper_config_msgs_MSGTYPE HandConfigMsg

#define HandCmdWrapper_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  cmd_msgs,          1)
#define HandCmdWrapper_CALLBACK pb_default_field_callback
#define HandCmdWrapper_DEFAULT NULL
#define HandCmdWrapper_cmd_msgs_MSGTYPE HandCmdMsg

#define HandMsg_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    direction,         1) \
X(a, STATIC,   SINGULAR, UENUM,    msg_type,          2) \
X(a, STATIC,   SINGULAR, UENUM,    chip_type,         3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (content,data_wrapper,content.data_wrapper),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (content,config_wrapper,content.config_wrapper),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (content,cmd_wrapper,content.cmd_wrapper),   6)
#define HandMsg_CALLBACK NULL
#define HandMsg_DEFAULT NULL
#define HandMsg_content_data_wrapper_MSGTYPE HandDataWrapper
#define HandMsg_content_config_wrapper_MSGTYPE HandConfigWrapper
#define HandMsg_content_cmd_wrapper_MSGTYPE HandCmdWrapper

extern const pb_msgdesc_t HandDataMsg_msg;
extern const pb_msgdesc_t HandConfigMsg_msg;
extern const pb_msgdesc_t HandCmdMsg_msg;
extern const pb_msgdesc_t HandDataWrapper_msg;
extern const pb_msgdesc_t HandConfigWrapper_msg;
extern const pb_msgdesc_t HandCmdWrapper_msg;
extern const pb_msgdesc_t HandMsg_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define HandDataMsg_fields &HandDataMsg_msg
#define HandConfigMsg_fields &HandConfigMsg_msg
#define HandCmdMsg_fields &HandCmdMsg_msg
#define HandDataWrapper_fields &HandDataWrapper_msg
#define HandConfigWrapper_fields &HandConfigWrapper_msg
#define HandCmdWrapper_fields &HandCmdWrapper_msg
#define HandMsg_fields &HandMsg_msg

/* Maximum encoded size of messages (where known) */
/* HandDataMsg_size depends on runtime parameters */
/* HandConfigMsg_size depends on runtime parameters */
/* HandCmdMsg_size depends on runtime parameters */
/* HandDataWrapper_size depends on runtime parameters */
/* HandConfigWrapper_size depends on runtime parameters */
/* HandCmdWrapper_size depends on runtime parameters */
/* HandMsg_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
